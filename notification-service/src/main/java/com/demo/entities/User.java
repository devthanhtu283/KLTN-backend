package com.demo.entities;// default package
// Generated Jan 27, 2025, 4:56:06 PM by Hibernate Tools 4.3.6.Final

import jakarta.persistence.*;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "jobs", uniqueConstraints = @UniqueConstraint(columnNames = "username"))
public class User implements java.io.Serializable {

	private Integer id;
	private String username;
	private String password;
	private int userType;
	private String email;
	private Date created;
	private String securityCode;
	private int status;
	private Set<Feedback> feedbacks = new HashSet<Feedback>(0);
	private Set<Image> images = new HashSet<Image>(0);
	private Set<Chat> chatsForSenderId = new HashSet<Chat>(0);
	private Set<Testhistory> testhistories = new HashSet<Testhistory>(0);
	private Set<Chat> chatsForReceiverId = new HashSet<Chat>(0);
	private Seeker seeker;
	private Employer employer;
	private Set<Test> tests = new HashSet<Test>(0);

	public User() {
	}

	public User(String username, String password, int userType, String email, Date created, String securityCode,
			int status) {
		this.username = username;
		this.password = password;
		this.userType = userType;
		this.email = email;
		this.created = created;
		this.securityCode = securityCode;
		this.status = status;
	}

	public User(String username, String password, int userType, String email, Date created, String securityCode,
			int status, Set<Feedback> feedbacks, Set<Image> images, Set<Chat> chatsForSenderId,
			Set<Testhistory> testhistories, Set<Chat> chatsForReceiverId, Seeker seeker, Employer employer,
			Set<Test> tests) {
		this.username = username;
		this.password = password;
		this.userType = userType;
		this.email = email;
		this.created = created;
		this.securityCode = securityCode;
		this.status = status;
		this.feedbacks = feedbacks;
		this.images = images;
		this.chatsForSenderId = chatsForSenderId;
		this.testhistories = testhistories;
		this.chatsForReceiverId = chatsForReceiverId;
		this.seeker = seeker;
		this.employer = employer;
		this.tests = tests;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "username", unique = true, nullable = false, length = 250)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", nullable = false, length = 250)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "user_type", nullable = false)
	public int getUserType() {
		return this.userType;
	}

	public void setUserType(int userType) {
		this.userType = userType;
	}

	@Column(name = "email", nullable = false, length = 65535)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "created", nullable = false, length = 10)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "security_code", nullable = false, length = 65535)
	public String getSecurityCode() {
		return this.securityCode;
	}

	public void setSecurityCode(String securityCode) {
		this.securityCode = securityCode;
	}

	@Column(name = "status", nullable = false)
	public int getStatus() {
		return this.status;
	}

	public void setStatus(int status) {
		this.status = status;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Feedback> getFeedbacks() {
		return this.feedbacks;
	}

	public void setFeedbacks(Set<Feedback> feedbacks) {
		this.feedbacks = feedbacks;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Image> getImages() {
		return this.images;
	}

	public void setImages(Set<Image> images) {
		this.images = images;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userBySenderId")
	public Set<Chat> getChatsForSenderId() {
		return this.chatsForSenderId;
	}

	public void setChatsForSenderId(Set<Chat> chatsForSenderId) {
		this.chatsForSenderId = chatsForSenderId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Testhistory> getTesthistories() {
		return this.testhistories;
	}

	public void setTesthistories(Set<Testhistory> testhistories) {
		this.testhistories = testhistories;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByReceiverId")
	public Set<Chat> getChatsForReceiverId() {
		return this.chatsForReceiverId;
	}

	public void setChatsForReceiverId(Set<Chat> chatsForReceiverId) {
		this.chatsForReceiverId = chatsForReceiverId;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "user")
	public Seeker getSeeker() {
		return this.seeker;
	}

	public void setSeeker(Seeker seeker) {
		this.seeker = seeker;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "user")
	public Employer getEmployer() {
		return this.employer;
	}

	public void setEmployer(Employer employer) {
		this.employer = employer;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Test> getTests() {
		return this.tests;
	}

	public void setTests(Set<Test> tests) {
		this.tests = tests;
	}

}
